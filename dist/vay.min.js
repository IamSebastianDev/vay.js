class Vay{constructor({dictionaries:t,config:e}={}){this._defaultConfig={targetAttribute:"vay",targetElement:document.documentElement,defaultLanguage:void 0,ignoreAttributes:!1,removeAttributesOnRender:!1},this._config=Object.assign({},this._defaultConfig,e),this._dicts=this._parseDictionaries(t),this._dictLanguages=Object.keys(this._dicts),this._defaultLanguage=this._config.defaultLanguage||this._evaluateDefaultLanguage()||this._dictLanguages[0],this._currentLanguage=this._defaultLanguage}_parseDictionaries(t){return Object.keys(t).forEach(t=>{2!=t.length&&console.warn(`Vay.js: '${t}' is not a  two letter language code. This should be fine, but it might not be possible to find an automatic match. Dictionary names should conform to the two letter language code format described in ISO 639-1.`)}),Object.fromEntries(Object.entries(t).map(([t,e])=>[t.toLowerCase(),e]))}_evaluateDefaultLanguage(){return this._languagesSupportedByBrowser.filter(t=>this._dictLanguages.includes(t))[0]}translate(t="",e={},n){n=n||this._currentLanguage;let a;a=null==this._dicts[n]?(console.warn(`Vay.js: 'No dictionary was provided for ${n}'.`),this._dicts[this._currentLanguage]):this._dicts[n];const i=0==e.count?0:e.count||1;n=t.split(".").reduce((t,e)=>t[e],a);let r;return r="object"==typeof n?n[(t=Object.keys(n).filter(t=>t<=i))[t.length-1]]||"undefined":n||"undefined",r.replaceAll(/{{.*?}}/gim,t=>t.substring(2,t.length-2).split(".").reduce((t,e)=>t[e],e))}render(){const a=this._config.targetAttribute;let t=this._config.targetElement.querySelectorAll(`[${a}]`),i=[];return t.forEach(n=>{var t=n.getAttribute(a);if(t&&("undefined"!=(t=this.translate(t))?n.hasAttribute("vay-html")?n.innerHTML=t:n.textContent=t:null==t&&i.push(n)),this._config.ignoreAttributes)return i;let e=[...new Set(n.getAttributeNames())];e.forEach(t=>{var e;t.includes(a)&&(null!=(e=t.split("-")[1])&&"html"!=e&&n.setAttribute(e,this.translate(n.getAttribute(t))),this._config.removeAttributesOnRender&&n.removeAttribute(t))})}),i}get _languagesSupportedByBrowser(){return[...new Set(window.navigator.languages.map(t=>t.split("-")[0].toLocaleLowerCase()))]}get currentLanguage(){return this._currentLanguage}set currentLanguage(t){return this._dictLanguages.includes(t)?(this._currentLanguage=t.toLocaleLowerCase(),window.dispatchEvent(new CustomEvent("setLanguage",{detail:{newLanguage:this._currentLanguage}})),!0):(console.error(`Vay.js: '${t}' does not exist as dictionary.`),!1)}}export{Vay};