name: Release Vay.js Packages

on:
    workflow_dispatch:
    push:
      branches:
        - main
        - "release"
    pull_request:  # ðŸ”¥ Ensures the workflow runs when a PR is created
      branches:
        - main
        - "release"

permissions:
  contents: write  # Needed for committing version updates
  pull-requests: write  # Needed for opening a PR

jobs:
  version-bump:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Determine Next Version (From @vayjs/vay)
        id: versioning
        run: |
          MASTER_PACKAGE="packages/@vayjs/vay"
          
          # Fetch all tags
          git fetch --tags
      
          # Get the latest tagged version
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 | sed 's/v//') # Remove "v" prefix
          CURRENT_VERSION=$(jq -r .version $MASTER_PACKAGE/package.json)
      
          echo "Latest Git Tag: $LATEST_TAG"
          echo "Current package.json version: $CURRENT_VERSION"
      
          # Use latest tag if available, otherwise fallback to package.json
          if [[ -n "$LATEST_TAG" ]]; then
            CURRENT_VERSION=$LATEST_TAG
          fi
      
          if git log -1 --pretty=%B | grep -iqE "^(feat|feature):"; then
            NEW_VERSION=$(bunx semver $CURRENT_VERSION --increment minor)
          elif git log -1 --pretty=%B | grep -iqE "^(fix|patch):"; then
            NEW_VERSION=$(bunx semver $CURRENT_VERSION --increment patch)
          elif git log -1 --pretty=%B | grep -iqE "^(breaking change):"; then
            NEW_VERSION=$(bunx semver $CURRENT_VERSION --increment major)
          else
            NEW_VERSION=$CURRENT_VERSION
          fi
      
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "New master package version: $NEW_VERSION"

      - name: Update All Package Versions
        run: |
            MASTER_PACKAGE="packages/@vayjs/vay"
        
            jq --arg version "$NEW_VERSION" '.version = $version' "$MASTER_PACKAGE/package.json" > temp.json && mv temp.json "$MASTER_PACKAGE/package.json"
        
            for package in packages/@vayjs/*; do
              if [ -f "$package/package.json" ]; then
                jq --arg version "$NEW_VERSION" '.version = $version' "$package/package.json" > temp.json && mv temp.json "$package/package.json"
              fi
            done
        
            # Force a change to ensure Git detects modifications
            echo "// Version updated by GitHub Action" >> packages/@vayjs/vay/package.json

      - name: Create Version Bump Branch
        run: |
            BRANCH_NAME="version-bump/${{ env.new_version }}"  # âœ… New unique prefix
            git checkout -b $BRANCH_NAME
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add packages/@vayjs/**/package.json
            git commit -m "chore: bump version to $NEW_VERSION"
            git push origin $BRANCH_NAME
            echo "Pushing branch $BRANCH_NAME to origin..."
            git push origin $BRANCH_NAME || (echo "Git push failed!" && exit 1)

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          title: "chore: bump version to ${{ env.new_version }}"
          body: "This PR updates the version to ${{ env.new_version }}."
          base: main
          branch: version-bump/${{ env.new_version }}
          labels: "release, automated"
          draft: false  # ðŸ”¹ Ensure it's not a draft
          delete-branch: false  # ðŸ”¹ Keep branch for debugging